server.port=8089
spring.datasource.url=jdbc:postgresql://${PGHOST}:${PGPORT}/${PG_DATABASE}
spring.datasource.username=${PG_RW_USER}
spring.datasource.password=${PG_RW_PASSWORD}

spring.sql.init.platform=postgresql
spring.jpa.properties.hibernate.default_schema=services_schema
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false

logging.level.org.springframework.security=INFO
logging.level.org.springframework=INFO
logging.level.com.deloitte=INFO
logging.level.root=INFO
logging.level.org.apache.kafka.clients.admin=ERROR

## Runs every minute
cronExpression=0 0/1 * * * *

brokerUrl=elrr-kafka:9092

kafka.topic=datasync-statements
kafka.dead.letter.topic=datasync-statements-dlq
kafka.groupId=elrr-consumer-group
kafka.groupIdConfig=elrr-group
kafka.fetch.min.bytes=1048576
kafka.fetch.max.bytes=104857600
kafka.max.partition.fetch.bytes=10485760
kafka.max.polling.records=1000
kafka.receive.buffer=1048576
kafka.send.buffer=1048576
kafka.session.timeout.ms=10000
kafka.auto.offset.reset=latest

server.forward-headers-strategy=NATIVE

spring.http.multipart.enabled=true
spring.http.multipart.max-file-size=2MB
spring.http.multipart.max-request-size=2MB

json.max.size.limit=2000000

# Editing switches
# Enable = true
# Disable = false
# Use true for p1
# Use false for Deloitte sandbox
check.http.header=true
check.media.type.json=true

# USE LOWERCASE !!!
lang.codes=en-us
